\documentclass[10pt,american]{beamer}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}
\setlength{\parindent}{0.1cm}
\usepackage{babel}
\ifx\hypersetup\undefined
  \AtBeginDocument{%
    \hypersetup{unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=true,pdfborder={0 0 1},backref=false,colorlinks=true}
  }
\else
  \hypersetup{unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=true,pdfborder={0 0 1},backref=false,colorlinks=true}
\fi
\usepackage{breakurl}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\usepackage[natbibapa]{apacite}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{Sweave}
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{longtable}
\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


\usepackage{graphicx}
\usepackage{listings}


%% Paste Sweavel content here from guidePreambleSweavel.tex
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true,style=Rinput,breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\normalsize}
\def\Rcolor{\color{black}}
\def\Rbackground{\color[gray]{0.90}}

\usepackage[natbibapa]{apacite}
\providecommand*{\code}[1]{\texttt{#1}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{
\Colorbox{light-gray}{#1}
}

\definecolor{darkblue}{HTML}{1e2277}
\hypersetup{colorlinks, linkcolor=, citecolor=darkblue, urlcolor=darkblue}

\mode<presentation>

\usetheme{Antibes}

% get rid of navigation symbols at bottom of slide
\beamertemplatenavigationsymbolsempty

% In document Latex options:

\expandafter\def\expandafter\insertshorttitle\expandafter{%
 \insertshorttitle\hfill\insertframenumber\,/\,\inserttotalframenumber}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}

%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\makeatother

\begin{document}
\SweaveOpts{concordance=TRUE}

<<include=T, echo=F>>=
if(!file.exists("tmpout")) dir.create("tmpout", showWarnings=F)
@

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/t,split=F,ae=F,height=4.5,width=7}

<<  echo=F>>=
options(width=70, prompt=" ", continue="  ")
options(useFancyQuotes = FALSE)
set.seed(12345)
op <- par()
pjmar <- c(4.1, 4.1, 1.5, 2.1)
##pjmar <- par("mar")
par(mar=pjmar, ps=11)
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
pdf.options(onefile=F,family="Times",pointsize=12)
@

\title[WinteR - merge]{WinteR Statistical Workshop}
\subtitle[]{Merge}

\author{Zack Roman\inst{1,2}}

\institute[K.U.]{\inst{1}Center for Research Methods and Data Analysis \\\smallskip
                \inst{2}Department of Psychology}



\date{2017}

\makebeamertitle

\AtBeginSubsection[]{
  \frame<beamer>{ 
    \frametitle{Outline}
    \tableofcontents[currentsubsection] 
  }
}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Outline}

\tableofcontents{}

\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Goals of This Session}

\textbf{Conceptual:}
\begin{itemize}
\item Types of merges
\item Merging vocabulary
\item When to use merges 
\end{itemize}
\textbf{Skill Building:}
\begin{itemize}
\item Practicing merging variants
\item Different implementations of merging in R
\item Dangers associated with improper merging and how to avoid them

\end{itemize}
\end{frame}


%%%Begin Slides

\section{What is Merging}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Small Example}
<<  echo=F>>=
#Build Some Data
authors <- data.frame(
  surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
  nationality = c("US", "Australia", "US", "UK", "Australia"),
  deceased = c("yes", rep("no", 4)))

#Build Another Data Set
books <- data.frame(
  name = I(c("Tukey", "Venables", "Tierney",
             "Ripley", "Ripley", "McNeil", "R Core")),
  title = c("Exploratory Data Analysis",
            "Modern Applied Statistics",
            "LISP-STAT",
            "Spatial Statistics", "Stochastic Simulation",
            "Interactive Data Analysis",
            "An Introduction to R"),
  other_author = c(NA, "Ripley", NA, NA, NA, NA,
                   "Venables & Smith"))
@

<<se10, echo=T>>=
authors
books
merge(x = authors, y = books, by.x = "surname", by.y = "name")
@
\end{frame}




\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Merge Arguments}

<<  echo=T, eval = FALSE>>=
merge(x, y, by.x, by.y, by, incomparables, sort, all.x, all.y, all )
@

\begin{enumerate}
\item \code{x} Specifies the left data set
\item \code{y} Specifies the right data set
\item \code{by.x, by.y, by} specifies the key as a character
  string. \code{by} is common to both \code{x} and \code{y}.
\item \code{incomparables} provides values in the key to not be used
  for matching, such as NA, blank space, or NaN (not a number).
\item \code{sort} Logical (TRUE or FALSE), sorts the output 
\item \code{all.x, all.y, all} Logical, will help us determine the behavior of the merge. We will talk more about this as we go
\end{enumerate}
\end{frame}


\section{Types of Merges}
\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Binding is not a merging}
\begin{itemize}
  \item The functions \code{rbind()} and \code{cbind()} can be used to
    ``stack'' matrices on top of each other (rows bound together), or
    place them side by side (columns bound together)
\item Binding puts data sets together, but if the rows (or columns) are not in
  exactly the same order, it will corrupt the result. Binding two data
  sets is not merging
\item Merging takes into account a "Key" variable (typically an ID \#
  or Name), so that the correct rows are aligned with each other.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{SQL Terminology}

\begin{itemize}
  \item SQL = ``Structured Query Language''. Very widely used general
    purpose data-base framework.
  \item R merge developed in isolation, used different terminology.
  \item Next we show that the SQL terms ``left join'', ``inner join''
    and so forth can be achieved by properly setting the value of the
    merges \code{all} parameter (\code{all}, \code{all.x}, and
    \code{all.y})
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Left Join} 

The "Left Join" is used when the goal data set should \textbf{only} have rows that
are present in X. The key variable is used to scan Y for matches,
which are then merged with the X rows.
<<lj10, echo=F>>=
dat_legs <- data.frame(animal = I(c("dog", "cats", "human", "snake", "tree")), legs = c(4, 4, 2, 0, 0))
dat_fur <- data.frame(animal = I(c("dog", "cats", "human", "bird")), fur = c("yes", "Mostly", "No", " No"))
@

<<lj20, echo=T>>=
dat_legs
dat_fur
merge(x = dat_legs, y = dat_fur, by = "animal", all.x = TRUE)
@

Setting "all.x" to \textbf{TRUE} produces an "Inner Join". The output
data will only contain rows that have matching key values on
\textbf{both} input data sets.
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Left Join}
\begin{figure}
\includegraphics[]{importfigs/left_join_ven.pdf}
\end{figure}
\end{frame}



\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Left Join Switched}
Let's do a Left Join again, but switch the data sets.
<<lj30, echo=T>>=
dat_legs
dat_fur
merge(x = dat_fur, y = dat_legs, by = "animal", all.x = TRUE)
@
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Situations calling for Left Join}
\begin{itemize}
\item You want to investigate the relationship between fur and legs in
  animals
\item You have a data set of the animals you are interested in and
  their fur status
\item You obtain a list of \textbf{all} animals legs count
\begin{itemize}
\item Key = Animal Name
\item Output data is the length of the fur data set
\end{itemize}
\item You want to investigate the effect of tuition on retention rate
  in Florida
\item You have Floridian school tuition rates data set
\item You obtain a nationwide data set of retention rates
\begin{itemize}
\item Key = School Name
\item Output data is the length of the tuition rates data set
\end{itemize}
\end{itemize}
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Inner Join}

The "Inner join" is used when the goal data set should only have
rows that have keys in both the X and Y data.

<<ij10,  echo=T>>=
dat_legs

dat_fur

merge(x = dat_legs, y = dat_fur, by = "animal", all = FALSE)
@

Setting "all" to \textbf{FALSE} produces an "Inner Join". The output
data will only contain rows that have matching key values on
\textbf{both} input data sets.
\end{frame}


\begin{frame}[containsverbatim]
\frametitle{Inner Join}
\begin{figure}
\includegraphics[]{importfigs/inner_join.pdf}
\end{figure}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Qualities of Inner Joins}
\begin{itemize}
\item Pro, result data set will be more complete than other merges. 
\item Con, result data set looses more information than other merges.
\end{itemize}
\end{frame}





\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Full Join}

Full Join keeps all data rows, filling in unmatched rows with missing
values.
<<fj10,  echo=T>>=
dat_legs
dat_fur
@
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Full Join}
<<fj20,  echo=T>>=
merge(x = dat_legs, y = dat_fur, by = "animal", all = TRUE)
@
\end{frame}


\begin{frame}[containsverbatim]
\frametitle{Full Join}
\begin{figure}
\includegraphics[]{importfigs/full_join.pdf}
\end{figure}
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Properties of Full Joins}
\begin{itemize}
\item You want an output set with all cases from both data sets
\item There will be lots of "missing" values
\item You don't loose anything, but working with the data is harder
\begin{itemize}
\item Need to subset before plotting 
\item Need to deal with potentially large missing proportion
\end{itemize}
\end{itemize}
\end{frame}



\section{Practice}
\begin{frame}[containsverbatim]
\frametitle{Practice}
<<  echo=F>>=
dat1 <- data.frame(Company = I(c("A", "B", "C", "D", "E")), Earnings = c(126345, 492012, 234512, -28124, 128675))
  
dat2 <- data.frame(Company = I(c("A", "B", "C", "F")), Region = c("Midwest", "Southeast", "West", " North"))
@

<<  echo=T>>=
dat1
dat2
@
Can you:
\begin{itemize}
\item Left Join the data so we have all Earnings in the Output set.
\item Left Join the data so we have all Regions in the Output set.
\item Inner Join the data so we have no missing data.
\item Full Join the data so we have everything in the Output set. 
\end{itemize}
\end{frame}




\begin{frame}[containsverbatim]
\frametitle{Practice: Answer 1}
<<  echo=T>>=
merge(x = dat1, y = dat2, by = "Company", all.x = TRUE)
@
\begin{itemize}
\item Left Join the data so we have all Earnings in the Output set.
\end{itemize}
\end{frame}



\begin{frame}[containsverbatim]
\frametitle{Practice: Answer 2}
<<  echo=T>>=
merge(x = dat2, y = dat1, by = "Company", all.x = TRUE)
@
\begin{itemize}
\item Left Join the data so we have all Regions in the Output set.
\end{itemize}
\end{frame}


\begin{frame}[containsverbatim]
\frametitle{Practice: Answer 3}
<<  echo=T>>=
merge(x = dat1, y = dat2, by = "Company", all = FALSE)
@
\begin{itemize}
\item Inner Join the data so we have no missing data.
\end{itemize}
\end{frame}


\begin{frame}[containsverbatim]
\frametitle{Practice: Answer 4}
<<  echo=T>>=
merge(x = dat1, y = dat2, by = "Company", all = TRUE)
@
\begin{itemize}
\item Full Join the data so we have everything in the Output set. 
\end{itemize}
\end{frame}



\section{Merging Long Data: Multiple IDs}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Longitudinal Data}

\begin{itemize}
\item Data comes in 2 typical formats
\begin{enumerate}
\item Wide: Columns that describe units of observation (one row per state,
  or per school, or per child)
  
  \begin{tabular}{rr}
    state & region\tabularnewline
    \hline
    Alabama & south\tabularnewline
    Alaska & north\tabularnewline
    $\vdots$ & \tabularnewline
  \end{tabular}
\item Long: Repeated observations, several times for each unit. 
  
  \begin{tabular}{rrr}
year & state & poverty\tabularnewline
\hline
2000 & Alabama & 13\tabularnewline
2001 & Alabama & 12\tabularnewline
$\vdots$ & & \tabularnewline
2017 & Wisconsin & 11\tabularnewline
\end{tabular}
  
\end{enumerate}
\item We often want to merge the information about the units from the
  wide format onto the longitudinal data that is in the long format.

\end{itemize}
\end{frame}



\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Example: Merging Wide data onto Longitudinal Data}
<<long10,  echo=F>>=
dat_long <- data.frame(
  child_id = I(c("110", "110", "110", "210", "210", "210")), Time = c(1, 2, 3, 1, 2, 3), FSIQ = c(98, 102, 104, 89, 91, 95))

dat_edu <- data.frame(child_id = I(c("210", "110")), par_edu = c("BA", "HS"))
@

The longitudinal data is about children measured at 3 time points
<<long50,  echo=T>>=
dat_long
@

Separate data about the education of parents is available
for some children
<<long60,  echo=T>>=
dat_edu
@
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Longitudinal Data: Long}

<<long70  echo=T>>=
merge(x = dat_long, y = dat_edu, by = "child_id", all = TRUE)
@
\begin{itemize}
  \item This is a full join
  \item No problems encountered, result \emph{seems} adequate. 
\end{itemize} 
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Points of caution in the full join}
    \begin{enumerate}
      \item If information about some families is missing from the
        wide data, then missing values will be created in the result
 
        Example:
        
        We change the wide data by removing one child
<<long71a,  echo=F, include=F>>=
dat_edu2 <- data.frame(child_id = I(c("210")), par_edu =
c("BA"))
@   

<<long71b, echo=F>>=
dat_edu2
@   

<<long71c>>=
merge(x = dat_long, y = dat_edu2, by = "child_id", all = TRUE)
@ 

\framebreak
    \item If wide data includes information about children/families
        that are not tracked in the long data, then the full join will
        create ``extra'' all missing lines in the longitudinal part.
    
    Example:
    
<<long80,  echo=F, include=F>>=
dat_edu2 <- data.frame(child_id = I(c("210", "110",  "400", "501")), par_edu =
c("BA", "HS", "ES", "HS"))
@

We only change \code{dat\_edu} by inserting additional rows for some
children. 
    
<<long82, echo=F>>=
dat_edu2
@ 

Why would this happen in real life? Suppose these are child/parent
data rows from a different study in which some of the children
participated.  

\framebreak
<<long85>>=
merge(x = dat_long, y = dat_edu2, by = "child_id", all = TRUE)
@ 
\framebreak

\item Some users may prefer to think of this as a left join, keeping
  only rows about children in a study (and omitting rows about families
  of children who are not in the study)
  
<<long86>>=
merge(x = dat_long, y = dat_edu2, by = "child_id", all.x = TRUE, all.y = FALSE)
@ 
\end{enumerate}
\end{frame}    
        
\begin{frame}[containsverbatim]
\frametitle{Longitudinal Data: Long Data by Long Data}
<<  echo=F>>=
dat_long1 <- data.frame(
  child_id = I(c("110", "110", "110", "210", "210", "210")),
  Time = c(1, 2, 3, 1, 2, 3),
  FSIQ = c(98, 102, 104, 89, 91, 95))

dat_long2 <- data.frame(
  child_id = I(c("210", "210", "210", "110", "110", "110")),
  Time = c(1, 2, 3, 1, 2, 3),
  Reaction = c(0.34, 0.28, 0.19, 0.33, 0.32, 0.28))
@
<<  echo=T>>=
dat_long1
dat_long2
@
Notice here, the dangers are repeating ID's in both data sets.
\end{frame}


\begin{frame}[containsverbatim]
\frametitle{Longitudinal Data: Long Data by Long Data}
<<  echo=T>>=
head(merge(x = dat_long1, y = dat_long2, by = "child_id", all.x = TRUE), 12)
@
This is \textbf{WRONG!!!} look closely.
\end{frame}


\begin{frame}[containsverbatim]
\frametitle{Longitudinal Data: Long Data by Long Data}
To solve our problem we provide multiple Keys to the "by" argument:
<<  echo=T>>=
merge(x = dat_long1, y = dat_long2, by = c("child_id", "Time"), all.x = TRUE)
@
That is much better, notice the fix:
<<  echo=T, evel = FALSE>>=
by = c("child_id", "Time")
@
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Longitudinal Data: Long Data by Long Data}
An intuitive way to determine when you need to supply multiple keys to the "by" argument is to ask yourself:
\begin{itemize}
\item Can every occurrence of my ID variable be uniquely identified ?
\item If not, which other variable is necessary to produce an uniquely identified ID ?
\end{itemize}
\end{frame}



\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Longitudinal Data: QUIZ}
Which columns together create the proper uniquely identifiable key set?
<<  echo=F>>=

dat_nat <- data.frame(
  ID = I(c(
  "USA", "USA", "USA", "USA", "UK", "UK", "UK", "UK")),
  Year = c(1990, 1990, 1991, 1991, 1990, 1990, 1991, 1991),
  Quarter = I(c("Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2")),
  population = rnorm(8, 10, 1),
  illnesses = rnorm(8, 100, 10))

@

<<  echo=T>>=
dat_nat
@
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Longitudinal Data: A Useful way to Identify Keys}
<<  echo=T>>=
table(dat_nat$ID)
@
Not unique, we need another key
<<  echo=T>>=
table(dat_nat$ID, dat_nat$Quarter)
@
getting closer
<<  echo=T>>=
table(dat_nat$ID, dat_nat$Quarter, dat_nat$Year)
@
Winner! Each data point can be uniquely identified as being collected from a country, during a year, and a quarter. 
\end{frame}


\section{Typical Issues and How to Avoid Them}
\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Different Key Names}
<<  echo=F>>=
datX <- data.frame(
  ID = I(c("USA", "USA", "USA", "USA", "UK", "UK", "UK", "UK")),
  Year = c(1990, 1990, 1991, 1991, 1990, 1990, 1991, 1991),
  Quarter = I(c("Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2")),
  pop = rnorm(8, 10, 1), illnesses = rnorm(8, 100, 10))
  
datY <- data.frame(
  Country = I(c(
  "USA", "USA", "USA", "USA", "UK", "UK", "UK", "UK")),
  year = c(1990, 1990, 1991, 1991, 1990, 1990, 1991, 1991),
  Semester = I(c("Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2")),
  percipitation = rnorm(8, 10, 1),cars = rnorm(8, 100, 10))

@
<<  echo=T>>=
head(datX)
head(datY)
@
\end{frame}








\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Different Key Names}
<<  echo=F>>=
datX <- data.frame(
  ID = I(c("USA", "USA", "USA", "USA", "UK", "UK", "UK", "UK")),
  Year = c(1990, 1990, 1991, 1991, 1990, 1990, 1991, 1991),
  Quarter = I(c("Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2")),
  pop = rnorm(8, 10, 1), illnesses = rnorm(8, 100, 10))
  
datY <- data.frame(
  Country = I(c(
  "USA", "USA", "USA", "USA", "UK", "UK", "UK", "UK")),
  year = c(1990, 1990, 1991, 1991, 1990, 1990, 1991, 1991),
  Semester = I(c("Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2")),
  percipitation = rnorm(8, 10, 1),cars = rnorm(8, 100, 10))
@
<<  echo=T>>=
head(datX)
head(datY)
@
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Different Key Names}
<<  echo=T>>=
merge(x = datX, y = datY, by.x = c("ID", "Year", "Quarter"), by.y = c("Country", "year", "Semester"),all = TRUE)
@
\end{frame}



\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Matching Missing}
<<  echo=F>>=
datX <- data.frame(
  ID = I(c(
  "111", "112", "NA", "114", "115", "116", "NA")), cars = rbinom(7, 10, 0.5), fear = rnorm(7, 100, 10))
  
datY <- data.frame(ID = I( c("111", "NA", "113", "114", "115", "NA", "117")), pets = rbinom(7, 10, 0.5))
@
<<  echo=T>>=
datX
datY
@
\end{frame}


\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Matching Missing:The Problem}
<<  echo=T>>=
merge(x = datX, y = datY, by = "ID", all.x = TRUE)
@
\textbf{Oops!} That is a dangerous outcome:  NA columns were merged together
\end{frame}



\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Matching Missing:The Remedy}
\code{incomparables} to the rescue
<<  echo=T>>=
merge(x = datX, y = datY, by = "ID", all= FALSE, incomparables = "NA")
@
That is much better! Always remember to use the \code{incomparables} argument if you have any missing data on keys.
\end{frame}

\section{Further Help and Resources}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Kutils::mergeCheck}
<<  echo=F>>=
library(kutils)
df1 <- data.frame(id = 1:7, x = rnorm(7))
df2 <- data.frame(id = c(2:6, 9:10), x = rnorm(7))
@
<<  echo=T>>=
df1
df2
@
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Kutils::mergeCheck}
<<  echo=T>>=
library(kutils)
mergeCheck(df1, df2, by = "id")
@
\begin{itemize}
\item mergeCheck alerts you to potential merging issues
\item ID 1 and 7 in the X data frame dont have matching Y IDs
\item Further, ID 9 and 10, in the Y data frame dont have matching X IDs
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Kutils::mergeCheck}
<<  echo=F>>=
library(kutils)
df1 <- data.frame(idx = c(1:5, NA, NaN), x = rnorm(7))
df2 <- data.frame(idy = c(2:6, 9:10), x = rnorm(7))
@
<<  echo=T>>=
df1
df2
@
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Kutils::mergeCheck}
<<  echo=T>>=
mergeCheck(df1, df2, by.x = "idx", by.y = "idy")
@
\begin{itemize}
\item In this situation we are warned of:
\begin{itemize}
\item Unacceptable key values: NA and NaN
\item Again, unmatched IDs: 1,6,7,9,10
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Kutils::mergeCheck}
Load \code{library(kutils)} and run \code{example(mergeCheck)} to learn more about the function. Our kutils package has much more to offer! check out the kutils help page with \code{help(package = "kutils")}

\end{frame}




\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{More Information}
\begin{itemize}
\item{The CRMDA has a guide available on merges:}
\begin{itemize}
\item \url{https://crmda.ku.edu/guide-41-merge_R_SQL}
\end{itemize}
\end{itemize}

\end{frame}


\end{document}
